{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","image","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EACNC,mBAAS,IADH,mBACnCC,EADmC,KACvBC,EADuB,KAe1C,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAY,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACtCN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdpB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,YCLlBG,EAAc,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IACpC,OACI,yBAAKC,UAAU,8CACX,yBAAKC,IAAKF,EAAKG,IAAKL,IACpB,2BAAIC,K,uBCNHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAUF,GAD7C,8DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAKc,EAAIC,OAAOC,iBAAiBhB,QARtB,kBAWZY,GAXY,4CAAH,sDCIPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EACZrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAUtC,OAJAC,qBAAU,WACNjB,EAAQC,GAAUiB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CAACT,KAAMY,EAAML,SAAS,SAC/D,CAACb,IAEGc,EDPyBK,CAAanB,GAAhCU,EAFsB,EAE5BJ,KAAcO,EAFc,EAEdA,QAErB,OACI,oCACI,wBAAIjB,UAAU,qCAAqCI,GAClDa,GAAW,cACZ,yBAAKjB,UAAU,8CACLc,EAAOF,KAAI,SAACY,GAAD,OAAW,kBAAC,EAAD,eAAaC,IAAKD,EAAM3B,IAAQ2B,UEO7DE,EAhBM,WACjB,IADuB,EAEW3C,mBADR,CAAC,WADJ,mBAEhB4C,EAFgB,KAEJ7C,EAFI,KAIvB,OACI,oCACI,8CACA,kBAAC,EAAD,CAAaA,YAAaA,IAC1B,6BACA,4BACM6C,EAAWf,KAAI,SAACR,GAAD,OAAc,kBAAC,EAAD,CAASqB,IAAKrB,EAAUA,SAAUA,UCTjFwB,IAASC,OAAQ,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.b0a13ec0.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategory}) => {\n    const [inputValue, setinputValue] = useState('');\n    \n    const handleInputChange = (e) => {\n        setinputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategory((cats) => [inputValue, ...cats]);\n            setinputValue('');\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategory: PropTypes.func.isRequired\n};\n","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeInDown\">\n            <img src={url} alt={id} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","export const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=8&api_key=a6RG8jq268wId2pyLxxw01qQhbOnZ96A`; \n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    });\n    return gifs;\n};","import React from 'react'\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({category}) => {\n    \n    const {data: images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__shakeX\">{category}</h3>\n            {loading && 'Cargando...'}\n            <div className=\"card-grid animate__animated animate__flash\">\n                    { images.map((image) => <GifGridItem key={image.id} {...image} />) }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then(imgs => setstate({data: imgs, loading: false}));\n    }, [category]);\n\n    return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n    const defaultCategories = ['Naruto'];\n    const [categories, setCategory] = useState(defaultCategories);\n\n    return (\n        <>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategory={setCategory} />\n            <hr />\n            <ol>\n                { categories.map((category) => <GifGrid key={category} category={category} />) }\n            </ol>\n        </>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render( <GifExpertApp />, document.getElementById('root') );"],"sourceRoot":""}